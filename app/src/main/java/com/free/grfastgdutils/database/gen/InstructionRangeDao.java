package com.free.grfastgdutils.database.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.free.grfastgdutils.database.tables.InstructionRange;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "INSTRUCTION_RANGE".
*/
public class InstructionRangeDao extends AbstractDao<InstructionRange, Long> {

    public static final String TABLENAME = "INSTRUCTION_RANGE";

    /**
     * Properties of entity InstructionRange.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Whichuiport = new Property(1, String.class, "whichuiport", false, "WHICHUIPORT");
        public final static Property Startaddress = new Property(2, String.class, "startaddress", false, "STARTADDRESS");
        public final static Property Startaddressmachine = new Property(3, String.class, "startaddressmachine", false, "STARTADDRESSMACHINE");
        public final static Property Lenth = new Property(4, String.class, "lenth", false, "LENTH");
    }


    public InstructionRangeDao(DaoConfig config) {
        super(config);
    }
    
    public InstructionRangeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"INSTRUCTION_RANGE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"WHICHUIPORT\" TEXT," + // 1: whichuiport
                "\"STARTADDRESS\" TEXT," + // 2: startaddress
                "\"STARTADDRESSMACHINE\" TEXT," + // 3: startaddressmachine
                "\"LENTH\" TEXT);"); // 4: lenth
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"INSTRUCTION_RANGE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, InstructionRange entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String whichuiport = entity.getWhichuiport();
        if (whichuiport != null) {
            stmt.bindString(2, whichuiport);
        }
 
        String startaddress = entity.getStartaddress();
        if (startaddress != null) {
            stmt.bindString(3, startaddress);
        }
 
        String startaddressmachine = entity.getStartaddressmachine();
        if (startaddressmachine != null) {
            stmt.bindString(4, startaddressmachine);
        }
 
        String lenth = entity.getLenth();
        if (lenth != null) {
            stmt.bindString(5, lenth);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, InstructionRange entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String whichuiport = entity.getWhichuiport();
        if (whichuiport != null) {
            stmt.bindString(2, whichuiport);
        }
 
        String startaddress = entity.getStartaddress();
        if (startaddress != null) {
            stmt.bindString(3, startaddress);
        }
 
        String startaddressmachine = entity.getStartaddressmachine();
        if (startaddressmachine != null) {
            stmt.bindString(4, startaddressmachine);
        }
 
        String lenth = entity.getLenth();
        if (lenth != null) {
            stmt.bindString(5, lenth);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public InstructionRange readEntity(Cursor cursor, int offset) {
        InstructionRange entity = new InstructionRange( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // whichuiport
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // startaddress
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // startaddressmachine
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // lenth
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, InstructionRange entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setWhichuiport(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setStartaddress(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setStartaddressmachine(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setLenth(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(InstructionRange entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(InstructionRange entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(InstructionRange entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
